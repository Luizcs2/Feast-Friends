# A descriptive name for the workflow.
name: Continuous Deployment

# This workflow is triggered on a 'push' event.
on:
  push:
    # But it only runs if the push event includes one or more tags.
    tags:
      # The pattern matches tags like 'v1.0.0', 'v1.2.3', etc.
      - 'v*.*.*'

# Define the jobs for this workflow.
jobs:
  # A single job to build the Docker image and push it to a registry.
  build-and-push-image:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    # Permissions required by the job for interacting with GitHub Packages or other services.
    permissions:
      contents: read
      packages: write

    steps:
      # Step 1: Check out the repository code.
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Log in to the container registry (e.g., Docker Hub).
      # It securely uses secrets stored in your GitHub repository settings.
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          # ðŸš¨ IMPORTANT: Create these secrets in your repo settings!
          # Settings > Secrets and variables > Actions > New repository secret
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Step 3: Set up Docker Buildx, an advanced builder that's required for some features.
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Step 4: Automatically extract metadata like tags and labels for the Docker image.
      # This is very useful. It will automatically tag the image with the Git tag (e.g., 'v1.2.3') and 'latest'.
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          # ðŸš¨ IMPORTANT: Change this to your Docker Hub username and image name.
          images: luizcs2/feast-friends-api

      # Step 5: Build the Docker image and push it to the registry.
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          # The build context (the current directory).
          context: .
          # The path to your Dockerfile.
          file: ./docker/Dockerfile.dev
          # 'true' means it will push to the registry after a successful build.
          push: true
          # Use the tags generated by the 'meta' step above.
          tags: ${{ steps.meta.outputs.tags }}
          # Use the labels generated by the 'meta' step above.
          labels: ${{ steps.meta.outputs.labels }}